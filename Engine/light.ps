/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
    float3 reflection;
    float4 specular;


    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;
    
    // Initialize the specular color.
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // 디퓨즈 값 계산. 빛의 방향을 반대로해서 픽셀의 노말값과 점곱 -> 두 벡터의 크기가 1이므로 cos값으로 나옴 cos값을 0~1의 범위에서 사용
    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

        // Saturate the ambient and diffuse color.
        // 주변광과 확산광이 더해지면 1이 넘을 수 잇기 때문에
        color = saturate(color);

        // 반사 벡터 계산
        reflection = normalize(2.0f * lightIntensity * input.normal - lightDir);

        // 반사 벡터, 반사강도, 시야방향으로 반사광의 양을 계산
        // 퐁 스펙큘러 공식 = 리플렉션 벡터와 뷰 벡터를 점곱한 것의 광택계수를 승수로 한다.
        specular = specularColor * pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

    // 마지막에 스펙큘러 값을 추가 해준다. 최종적으로 보이는 하이라이트 부분이기 때문
    color = saturate(color + specular);

    return color;
}